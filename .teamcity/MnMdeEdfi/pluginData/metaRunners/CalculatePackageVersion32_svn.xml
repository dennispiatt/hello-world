<?xml version="1.0" encoding="UTF-8"?>
<meta-runner name="Calculate Package Version 3.2 (svn)">
  <description>Calculates the package version using VCS information.  Based on trunk name:
  [DefaultTrunkName]: No modification to parameters
  [DefaultTrunkName]_[channel]: uses Channel specified in trunk name, and adds '-[channel]'
  [AnythingElse]: uses entire trunk name, and adds '-[AnythingElse]'
  OverridePackageVersion will not update PackageVersion variable
  Output: PackageVersion </description>
  <settings>
    <parameters>
      <param name="cpv.MajorVersion" spec="text display='normal' label='Major Version'" value="%MajorPackageVersion%" />
      <param name="cpv.MinorVersion" spec="text display='normal' label='Minor Version'" value="%MinorPackageVersion%" />
      <param name="cpv.PatchVersion" spec="text display='normal' label='Patch Version'" value="%PatchPackageVersion%" />
      <param name="cpv.SemVerVersion" spec="text description='SemVer Version' display='normal' label='SemVer Version'" value="%SemVerVersion%" />
      <param name="cpv.PackageVersion" spec="text display='normal' label='Package Version'" value="%PackageVersion%" />
      <param name="cpv.Channel" spec="text display='normal' label='Channel'" value="%Channel%" />
      <param name="cpv.OverridePackageVersion" spec="checkbox label='Override Package Version' display='normal' uncheckedValue='false' checkedValue='true'" value="false" />
      <param name="cpv.SetBuildNumber" spec="checkbox display='normal' label='Set the Build Number with resulting Version' uncheckedValue='false' checkedValue='true'" value="true" />
      <param name="cpv.TrunkName" spec="text description='Trunk name be used to determine Version' display='normal' label='Trunk Name'" value="%TrunkName%" />
      <param name="cpv.DefaultTrunkName" spec="text description='Trunk name be used to determine if this is the default Version' display='normal' label='Default Trunk Name'" value="%DefaultTrunkName%" />
    </parameters>
    <build-runners>
      <runner name="Calculate Package Version (svn)" type="jetbrains_powershell">
        <parameters>
          <param name="jetbrains_powershell_bitness" value="x64" />
          <param name="jetbrains_powershell_errorToError" value="true" />
          <param name="jetbrains_powershell_execution" value="PS1" />
          <param name="jetbrains_powershell_minVersion" value="3.0" />
          <param name="jetbrains_powershell_script_code"><![CDATA[$overridePackageVersion = [boolean]::Parse("%cpv.OverridePackageVersion%")
$packageVersion = "%cpv.PackageVersion%"
$channel = "%cpv.Channel%"
$buildCounter = "%build.counter%" -as [int]
$trunkName = '%cpv.TrunkName%'
$defaultTrunkName = '%cpv.DefaultTrunkName%'
#Positive values only.
$major = "%cpv.MajorVersion%" -as [uint32]
$minor = "%cpv.MinorVersion%" -as [uint32]
$patch = "%cpv.PatchVersion%" -as [uint32]
$semver = "%cpv.SemVerVersion%"
$setBuildNumber = [boolean]::Parse("%cpv.SetBuildNumber%")

 Function Get-DeploymentChannel {
 	Param(
 	[string] $trunkName = "nobranch",
 	[string] $defaultTrunkName = "main"
)
	if ($trunkName.Contains("/")) 
	{
		$trunkName = $trunkName.substring($trunkName.lastIndexOf("/")).trim("/")
	}
	switch -regex ($trunkName) {
		"^$defaultTrunkName`$" {
            $channel = ""
			break
		}
		"^(?:$defaultTrunkName)_(?<channel>\w*)`$" {
			$channel = $Matches.channel
			break
		}
		default {
			$channel = $trunkName -replace '^h?f-','' -replace '[^A-Za-z0-9]',''
			if ($channel.Length -gt 20) {
				$channel = $channel.substring(0,20)
			}
			break
		}
	}
 	return $channel
 }

 Function Get-PackageVersion {
 	Param(
 	[string] $channel,
 	[UInt32] $major = 0,
 	[UInt32] $minor = 0,
 	[UInt32] $patch = 0,
 	[ValidateSet("1.0.0","2.0.0")]
 	[string] $semver = "1.0.0"
 	)
 	$packageVersion = [String]::Join(".",($major, $minor, $patch))

     if ($channel -ne "") {
 		$packageVersion = "$packageVersion-$channel"
     }
 	if ($semver -eq "2.0.0") {
 		$packageVersion += "+$buildCounter"
 	}
 	return $packageVersion
}

if (-not $overridePackageVersion) {
	if ($trunkName -eq [String]::Concat("%","teamcity",".","build",".","branch","%")) {
		$trunkName = "main"
	}
	write-host "Using trunk name: '$trunkName'"
	$channel = Get-DeploymentChannel -trunkName $trunkName -defaultTrunkName $defaultTrunkName
	$packageVersion = Get-PackageVersion -channel $channel -major $major -minor $minor -patch $patch -semver $semver
	write-host "Package Version: $packageVersion"
	write-host "Channel: $channel"
	write-host "##teamcity[setParameter name='Channel' value='$channel']"
	write-host "##teamcity[setParameter name='PackageVersion' value='$packageVersion']"
}
else {
	write-host "Package Version: $packageVersion"
}
if ($setBuildNumber) {
	write-host "##teamcity[buildNumber '$packageVersion']"
}]]></param>
          <param name="jetbrains_powershell_script_mode" value="CODE" />
          <param name="teamcity.step.mode" value="default" />
          <param name="jetbrains_powershell_edition" value="Desktop" />
        </parameters>
      </runner>
    </build-runners>
    <requirements />
  </settings>
</meta-runner>
